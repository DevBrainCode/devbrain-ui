// ******************************* DevBrain UI ****************************** //
// *
// *    Define the wrapper.
// *
// ************************************************************************** //
// *
// *    <div class="container">...</div>
// *    <div class="container-fluid">...</div>
// *    <div class="container-sm">...</div>
// *    <div class="container-md">...</div>
// *    <div class="container-lg">...</div>
// *    <div class="container-xl">...</div>
// *    <div class="container-xxl">...</div>
// *    <div class="container-xxxl">...</div>
// *
// ************************************************************************** //

@use './../abstracts/functions/collection';


/// Containers Base 
/// =============================================
///
/// cbl : containers base list
/// cbl : containers base selector
/// .container, 
/// .container-fluid, 
/// .container-phone, 
/// .container-tablet { ... }

$cbl: (container, container-fluid);
$cbs: '';

@each $key, $container in $containers {
  $cbl: append($cbl, container-#{$key});
}
@each $c in $cbl {
  $cbs: $cbs + '.#{$c}, ';
}
$cbs: unquote(str-slice($cbs, 1, -3));

#{$cbs} {
  position: relative;
  display: block;
  width: 100%;
  padding-right: map-get($spacers, 3);
  padding-left: map-get($spacers, 3);
  margin-right: auto;
  margin-left: auto;
  z-index: 1;
}


/// Set .container-xx width
/// =============================================
///
/// .container-phone { ... }
/// .container-tablet { ... }

@each $key, $value in $containers {
  .container-#{$key} {
    max-width: map-get($containers, $key);
  }
}



/// Responsive containers
/// =============================================
///
/// @media (min-width: ...px) {.container { ... }}

@each $size, $breakpoint in $breakpoints {
  @if $breakpoint > 0 {

    $container-list : (container);
    @media (min-width: $breakpoint) {

      $selectors: '';
      $container-list: collection.reverse($container-list);

      @each $container in $container-list {
        $selectors: $selectors + '.#{$container}, ';
      }
      $selectors: unquote(str-slice($selectors, 1, -3));

      #{$selectors} { 
        max-width: map-get($containers, $size);
      }

    }
  }
}
