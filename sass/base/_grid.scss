// ******************************* DevBrain UI ****************************** //
// *
// *    Grid layout.
// *
// ************************************************************************** //


// .grid
// .grid-start
// .grid-center
// .grid-end

// .grid .gap-N
// .grid .gap-x-N
// .grid .gap-y-N

// .column
// .column-N
// .column-N .offset-N


@use "sass:math";
@use './../abstracts/mixins/flex';

@mixin make-column($columns) 
{
    flex: 0 0 percentage(math.div($columns, $grid-columns));
    max-width: percentage(math.div($columns, $grid-columns));
}
@mixin make-break($columns) 
{
    // flex: 0 0 percentage(math.div($columns, $grid-columns));
    margin-right: 100% - (percentage(math.div($columns, $grid-columns)));
}
@mixin make-offset($columns) 
{
  margin-left: percentage(math.div($columns, $grid-columns));
}



/// Grid 
/// =============================================
///
.grid {
    @include flex.row;
    flex-wrap: wrap;

    &:after {
        content: "";
        display: table;
        clear: both;
    }

    @each $pos in (center, start, end)
    {
        &-#{$pos} {
            justify-content: #{$pos} !important;
        }
    }
}



/// Gaps
/// =============================================
///
.gap-0 [class^="column"]{
    padding: map-get($spacers, 0);
}

@each $i, $spacer in $spacers 
{
    .grid.gap-#{$i}
    {
        margin-right: calc(-1 * $spacer);
        margin-left: calc(-1 * $spacer);
    }

    .gap-#{$i} [class^="column"]
    {
        padding: $spacer;
    }
    .gap-x-#{$i} [class^="column"]{
        padding: map-get($spacers, 0) $spacer;
    }
    .gap-y-#{$i} [class^="column"]{
        padding: $spacer map-get($spacers, 0);
    }
}

/// Column
/// =============================================
///
.grid > * {
    flex-shrink: 0;
    width: 100%;
    max-width: 100%;
}

.column {
    flex: 1 0 0%;
}


// [class^=column].break {
//     border: 3px solid red;
//     // margin-right: 100%; 
// }

@for $i from 1 through $grid-columns {
    // :root {
    //     --column-#{$i}-width: #{percentage(math.div($i, $grid-columns))};
    // }

    .column-#{$i} {
        // flex: 0 0 var(--column-#{$i}-width);
        // max-width: var(--column-#{$i}-width);
        @include make-column($i);
        
        &.column-break {
            @include make-break($i);
        }
    }
}

@each $size, $breakpoint in $breakpoints 
{
    @if $breakpoint > 0 
    {
        @media (min-width: map-get($breakpoints, $size))
        {
            @for $i from 1 through $grid-columns 
            {
                .column-#{$size}-#{$i} {
                    // flex: 0 0 auto;
                    @include make-column($i);
                }
            }
        }
    }
}


/// Offset
/// =============================================
///
@for $i from 1 through $grid-columns {
    .offset-#{$i} {
        @include make-offset($i);
    }
}
@each $size, $breakpoint in $breakpoints 
{
    @if $breakpoint > 0 
    {
        @media (min-width: map-get($breakpoints, $size))
        {
            @for $i from 1 through $grid-columns 
            {
                .offset-#{$size}-#{$i} {
                    @include make-offset($i);
                }
            }
        }
    }
}