// ******************************* DevBrain UI ****************************** //
// *
// *    Components: Button
// *
// ************************************************************************** //

@use './../abstracts/mixins/corner';
@use './../abstracts/mixins/spaces';
@use './../abstracts/mixins/transition';
@use './../abstracts/functions/color';


/// Button variables
/// =============================================
///


/// Button component
/// =============================================
///

// plain
// outline

// background-color: 
// background-color: hover
// background-color: active
// background-color: disabled

// border-color: 
// border-color: hover
// border-color: active
// border-color: disabled

// text-color: 
// text-color: hover
// text-color: active
// text-color: disabled

.button {
    @include corner.rounded(6px);
    @include transition.set((background-color, border-color, color), .3s);
    cursor: pointer;

    line-height: 1;
    border-width: 1px;
    border-style: solid;


    // theme
    border-color: transparent;
    background-color: transparent;

    // sizes
    @include spaces.padding( $spacer * .6, $spacer * 1.4, $spacer * .6, $spacer * 1.4 );
    font-size: $spacer * 1;


    // &:hover {
    //     background-color: transparent;
    // }

    &-block {
        display: block;
        min-width: 100%;
    }
}

.button {
    &-small {
        @include spaces.padding( $spacer * .4, $spacer * 1, $spacer * .4, $spacer * 1 );
        font-size: $spacer * .8;
    }
    &-large {
        @include spaces.padding( $spacer * 1, $spacer * 2, $spacer * 1, $spacer * 2 );
        font-size: $spacer * 1.6;
    }
}

[rel=js-button] {
    transition: background-color map-get($delays, 'normal');

    &.active {
        background-color: chocolate;
    }
}











@each $key, $value in $base-pallet {
    $shade: color.shade($value, 30%);
    $tint: color.tint($value, 60%);
    $contrastText: color.contrastText($shade);

    .button-#{$key} {
        color: $contrastText;
        background-color: var(--#{$key});
        border-color: var(--#{$key});

        &:not(.button-effect):hover {
            color: $contrastText;
            background-color: var(--#{$key}-shade);
            border-color: var(--#{$key}-shade);
        }

        // .button-effect
        &:before {
            background-color: var(--#{$key}-shade);
        }
    }

    .button-#{$key}-outline {
        color: var(--#{$key});
        background-color: transparent;
        border-color: var(--#{$key}) !important;
        border-width: 1px !important;
        border-style: solid !important;

        &:hover {
            color: $contrastText;
            background-color: var(--#{$key}-shade);
            border-color: var(--#{$key}-shade);
        }
    }
}




$color: #0cf;

@-webkit-keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 var(--hover, red);
    }
}
@keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 var(--hover, red);
    }
}



.button-effect
{
    &-pulse:hover,
    &-pulse:focus {
        -webkit-animation: pulse .5s;
                animation: pulse .5s;
        box-shadow: 0 0 0 1em transparent;
    }



    &-close {
        transition: all .3s;
        box-shadow: inset 0 0 0 0 var(--hover, red), inset 0 0 0 0 var(--hover, red);
    }
    &-close:hover,
    &-close:focus {
        box-shadow: inset -1000px 0 0 0 var(--hover, red), inset 1000px 0 0 0 var(--hover, red);
    }

    &-fill-in:hover,
    &-fill-in:focus {
        box-shadow: inset 0 0 0 2em $color;
    }

    &-fill {
        &-in,
        &-down,
        &-right,
        &-up,
        &-left {
            position: relative;
            overflow: hidden;
            z-index: 1;
            border-color: transparent !important;
            transition: all .3s;
    
            &:before {
                content: '';
                position: absolute;
                // background-color: $color;
                transition: all .3s;
                z-index: -1;
            }
        }
    
        &-down::before,
        &-up::before {
            width: 100%;
            height: 0;
        }
        &-down::before {
            top: 0;
            left: 0;
        }
        &-up::before {
            bottom: 0;
            left: 0;
        }
        &-down:hover::before,
        &-up:hover::before {
            height: 100%;
        }
    
        &-left::before,
        &-right::before {
            width: 0;
            height: 100%;
        }
        &-left::before {
            top: 0;
            left: 0;
        }
        &-right::before {
            top: 0;
            right: 0;
        }
        &-left:hover::before,
        &-right:hover::before {
            width: 100%;
        }
    }
}


// .btn-animated {
//     animation: moveInBottom 5s ease-out;
//     animation-fill-mode: backwards;
// }

// @keyframes moveInBottom {
//     0% {
//         opacity: 0;
//         transform: translateY(30px);
//     }

//     100% {
//         opacity: 1;
//         transform: translateY(0px);
//     }
// }



// @each $theme, $properties in $themes {

//     // @if ($theme != $theme-default)
//     // {
//     //     :root[data-theme=#{$theme}] {
//     //         @each $property, $value in $properties {
//     //             --#{$property}: #{$value};
//     //         }
//     //     }
//     // }
// }


